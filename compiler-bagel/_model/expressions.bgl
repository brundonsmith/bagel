from './ast.bgl' import { SourceInfo, PlainIdentifier, Debug }
from './type-expressions.bgl' import { TypeExpression, FuncType, GenericFuncType, ProcType, GenericProcType }
from './ast.bgl' import { Block }

export type Expression = 
    | JavascriptEscape
    | Debug
    | Func
    | JsFunc
    | Proc
    | JsProc
    | Range
    | BinaryOperator
    | NegationOperator
    | Invocation
    | Indexer
    | ParenthesizedExpression
    | PropertyAccessor
    | LocalIdentifier
    | IfElseExpression
    | SwitchExpression
    | BooleanLiteral
    | NilLiteral
    | ObjectLiteral
    | ArrayLiteral
    | StringLiteral
    | ExactStringLiteral
    | NumberLiteral
    | ElementTag
    | InlineConstGroup
    | InstanceOf
    | AsCast

export nominal type JavascriptEscape({
    ...SourceInfo,
    
    js: string
})

export nominal type Func({
    ...SourceInfo,
    
    type: FuncType|GenericFuncType,
    body: Expression,
})

export nominal type JsFunc({
    type: FuncType|GenericFuncType,
    body: string,
})

export nominal type InlineConstGroup({
    declarations: (InlineConstDeclaration|InlineDestructuringDeclaration)[],
    inner: Expression
})

export nominal type InlineConstDeclaration({
    name: PlainIdentifier,
    type?: TypeExpression,
    awaited: boolean,
    value: Expression,
})

export nominal type InlineDestructuringDeclaration({
    properties: PlainIdentifier[],
    spread: PlainIdentifier?,
    destructureKind: 'array'|'object',
    awaited: boolean,
    value: Expression,
})

export nominal type Proc({
    type: ProcType|GenericProcType,
    body: Block,
})

export nominal type JsProc({
    type: ProcType|GenericProcType,
    body: string,
})

export nominal type Range({
    start: Expression,
    end: Expression,
})

export nominal type BinaryOperator({
    base: Expression,
    ops: [Operator, Expression][] //[[Operator, Expression], ...[Operator, Expression][]],
    // TODO: Once generics are fully functional, create a `type: FuncType` property
})

export nominal type NegationOperator({
    base: Expression,
})

export nominal type Operator({
    op: BinaryOp,
})

export const BINARY_OPS = [
    ['??'],
    ['||'],
    ['&&'],
    ['==', '!='],
    ['<=', '>=', '<', '>'],
    ['+', '-'],
    ['*', '/'],
]
// export ALL_BINARY_OPS = BINARY_OPS.flat()
// export type BinaryOp = typeof BINARY_OPS[number][number];
export type BinaryOp = string

// export function isBinaryOp(str: string): str is BinaryOp {
//     return (ALL_BINARY_OPS as string[]).includes(str);
// }

export nominal type Invocation({
    subject: Expression,
    args: Expression[],
    typeArgs: TypeExpression[],
})

export nominal type Indexer({
    subject: Expression,
    indexer: Expression,
})

export nominal type PropertyAccessor({
    subject: Expression,
    property: PlainIdentifier,
    optional: boolean,
})

export nominal type ParenthesizedExpression({
    inner: Expression,
})

export nominal type LocalIdentifier({
    name: string,
})

export nominal type IfElseExpression({
    cases: Case[],
    defaultCase?: Expression
})

export nominal type SwitchExpression({
    value: Expression,
    cases: SwitchCase[],
    defaultCase?: Expression
})

export nominal type Case({
    condition: Expression,
    outcome: Expression,
})

export nominal type SwitchCase({
    condition: Expression,
    outcome: Expression,
})

export nominal type ObjectLiteral({
    entries: ([PlainIdentifier, Expression]|Spread)[],
})

export nominal type ArrayLiteral({
    entries: (Expression | Spread)[],
})

export nominal type Spread({
    expr: Expression,
})

export nominal type StringLiteral({
    segments: (string|Expression)[],
})

export nominal type ExactStringLiteral({
    value: string,
})

export nominal type NumberLiteral({
    value: number,
})

export nominal type BooleanLiteral({
    value: boolean,
})

export nominal type NilLiteral(nil)

export nominal type ElementTag({
    tagName: PlainIdentifier,
    attributes: ([PlainIdentifier, Expression])[],
    children: Expression[],
})

export nominal type InstanceOf({
    expr: Expression,
    type: TypeExpression,
})

export nominal type AsCast({
    inner: Expression,
    type: TypeExpression,
})