from './ast.bgl' import { Block, Debug, PlainIdentifier, SourceInfo }
from './expressions.bgl' import { ExactStringLiteral, Expression, Func, JavascriptEscape, JsFunc, JsProc, Proc }
from './type-expressions.bgl' import { TypeExpression }

export type Declaration =
    | JavascriptEscape
    | ImportAllDeclaration
    | ImportDeclaration
    | TypeDeclaration
    | ProcDeclaration
    | FuncDeclaration
    | ValueDeclaration
    | DeriveDeclaration
    | RemoteDeclaration
    | AutorunDeclaration
    | TestExprDeclaration
    | TestBlockDeclaration
    | Debug

type Exported = { exported: boolean }

export nominal type ImportAllDeclaration({
    ...SourceInfo,
    
    name: PlainIdentifier,
    path: ExactStringLiteral,
})

export nominal type ImportDeclaration({
    ...SourceInfo,
    
    imports: ImportItem[],
    path: ExactStringLiteral,
})

export nominal type ImportItem({
    ...SourceInfo,
    
    name: PlainIdentifier,
    alias: PlainIdentifier?,
})

export nominal type TypeDeclaration({
    ...SourceInfo,
    ...Exported,

    name: PlainIdentifier,
    type: TypeExpression,
})

export nominal type ProcDeclaration({
    ...SourceInfo,
    ...Exported,

    action: boolean,
    name: PlainIdentifier,
    value: Proc|JsProc,
    platforms: Platform[],
})

export nominal type FuncDeclaration({
    ...SourceInfo,
    ...Exported,

    memo: boolean,
    name: PlainIdentifier,
    value: Func|JsFunc,
    platforms: Platform[],
})

export nominal type ValueDeclaration({
    ...SourceInfo,
    
    name: PlainIdentifier,
    type: TypeExpression?,
    value: Expression,
    isConst: boolean,
    exported: nil|'export'|'expose',
})

export nominal type DeriveDeclaration({
    ...SourceInfo,
    ...Exported,

    name: PlainIdentifier,
    type: TypeExpression?,
    expr: Expression,
})

export nominal type RemoteDeclaration({
    ...SourceInfo,
    ...Exported,

    name: PlainIdentifier,
    type: TypeExpression?,
    expr: Expression,
})

export nominal type AutorunDeclaration({
    ...SourceInfo,
    
    effect: Block,
})

export nominal type TestExprDeclaration({
    ...SourceInfo,
    
    name: ExactStringLiteral,
    expr: Expression,
})

export nominal type TestBlockDeclaration({
    ...SourceInfo,
    
    name: ExactStringLiteral,
    block: Block,
})

export const ALL_PLATFORMS = ['node', 'deno', 'browser']
export type Platform = elementof ALL_PLATFORMS
