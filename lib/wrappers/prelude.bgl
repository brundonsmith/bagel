
js#
import { log, iter as ___iter, ___typeof } from 'C:\\Users\\brundolf\\git\\bagel\\lib\\src\\core.ts'
#js

export proc logp(x: unknown) {
    js# console.log(x) #js
}

export func logf<T>(x: T): T => 
    js# (() => { console.log(x); return x })() #js

export func iter<T>(x: const T[]): Iterator<T> =>
    js# ___iter(x) #js

// export func typeof(val: unknown): 'string'|'number'|'boolean'|'nil'|'object'|'array'|'set'|'class-instance' =>
//     js# ___typeof(val) #js

export type Plan = <T>(const {
    then: <R>(fn: (el: T) => R) => Plan<R>
})

export type Iterator = <T>(const {
    map: <R>(fn: (el: T) => R) => Iterator<R>,
    filter: (fn: (el: T) => boolean) => Iterator<T>,
    array: () => T[],
})

export type LintRuleName = 'foo'

// TODO: Optional properties
export type BagelConfig = {
    lintRules: {[LintRuleName]: 'error'|'warn'|'off'}?,
    scripts: {[string]: () {}}?,
    platforms: 'all' | ('browser'|'node'|'deno')[]? // restrict standard libraries based on these
}