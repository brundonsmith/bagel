
js#
import { iter as ___iter } from 'https://raw.githubusercontent.com/brundonsmith/bagel/master/lib/ts/core.ts'
#js

export js proc log(x: unknown) {#
    console.log(x);
#}

export js func logf<T>(x: T): T => {#
   console.log(x);
   return x;
#}

export js func iter<T>(x: const T[]): Iterator<T> => {#
    return ___iter(x)
#}

export js func memo<
    TArgs extends const unknown[],
    TReturn extends unknown
>(fn: (...args: TArgs) => TReturn): (...args: TArgs) => TReturn => {#
    return ___computedFn(fn)
#}

export js func action<
    TArgs extends const unknown[]
>(pr: (...args: TArgs) { }): (...args: TArgs) { } => {#
    return ___action(pr)
#}

export func assert(condition: boolean, message: string): Error<string>? =>
    if condition {
        nil
    } else {
        Error(message)
    }

export type UnknownObject = {[string]: unknown} | (const {[string]: unknown})

type LintRuleName =
    | 'unnecessaryParens'
    | 'funcOrProcAsValue'
    | 'redundantConditional'
    | 'stringNumberConditional'
    | 'explicitBooleansOnly'
    | 'pureFunctions'

type LintRuleSeverity = 'error'|'warning'|'info'|'off'

export type BagelConfig = {
    platforms?: ('browser'|'node'|'deno')[],
    lintRules?: {[LintRuleName]: LintRuleSeverity}
}

export type Element = {
    tag: string,
    attributes: UnknownObject,
    children: unknown[]
}