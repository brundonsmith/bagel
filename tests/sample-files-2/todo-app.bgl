
from '../../lib/wrappers/core' import { iter }
from '../../lib/wrappers/local-storage' import { localStorage }
from '../../lib/wrappers/json' import { parse, stringify }

const lsKey = 'todo-list'

// const AppStore: {
//     items: TodoItem[],
//     addItem: () {},
//     clearDone: () {}
// } = {
//     items: [],
//     addItem: () {},
//     clearDone: () {}
// }

type TodoItem = {
    text: string,
    done: boolean
}

// func renderApp() =>
//     <div>
//         {iter<TodoItem>(AppStore.items)
//             .map<Element>(renderTodoItem)
//             .array()}

//         <button onClick={AppStore.addItem}>{'Add'}</button>
//         <button onClick={AppStore.clearDone}>{'Clear done'}</button>
//     </div>

// func renderTodoItem(item: TodoItem) =>
//     <div>
//         <input value={item.text} onChange={handleItemTextChange(item)}></input>
//         <input type={'checkbox'} checked={item.done} onChange={handleItemDoneChange(item)}></input>
//     </div>

// func memo handleItemTextChange(item: TodoItem) =>
//     (e) {
//         item.text = e.target.value;
//     }

// func memo handleItemDoneChange(item: TodoItem) =>
//     (e) {
//         item.done = e.target.checked;
//     }

func itemValid(item: TodoItem) => item.text.length > 3

store AppStore {
    
    visible items: TodoItem[] = (
        if (localStorage.getItem(lsKey) != nil) {
            parse(localStorage.getItem(lsKey))
        } else {
            []
        }
    )

    func allValid() => iter(this.items)//.every(itemValid)

    proc addItem() {
        this.items.push({ text: '', done: false });
    }

    proc clearDone() {
        this.items = iter(this.items).filter(item => item.done == false).array();
    }
}

proc main() {
    // reaction () => stringify(app.items, 0)
    // triggers (json) {
    //     localStorage.setItem(lsKey, json);
    // }
    // forever;

    // reaction () => renderApp()
    // triggers (content) {
    //     ___render(content);
    // }
    // forever;
}

// shared namespace (parent object? module?) for all global/system/browser/externalities?
