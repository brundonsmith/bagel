
from '../../lib/wrappers/core' import { iter, logf, logp }
from '../../lib/wrappers/local-storage' import { LocalStorage }
from '../../lib/wrappers/json' import { parse, stringify }
from '../../lib/wrappers/html' import { render, Event }

const lsKey = 'todo-list'

type TodoItem = {
    text: string,
    done: boolean
}

func renderApp() =>
    <div>
        {iter<TodoItem>(AppStore.items)
            .map<Element>(renderTodoItem)
            .array()}

        <button onClick={AppStore.addItem}>{'Add'}</button>
        <button onClick={AppStore.clearDone}>{'Clear done'}</button>
    </div>

func memo renderTodoItem(item: TodoItem) =>
    <div>
        <input value={item.text} onChange={handleItemTextChange(item)}></input>
        <input type={'checkbox'} checked={item.done} onChange={handleItemDoneChange(item)}></input>
    </div>

func memo handleItemTextChange(item: TodoItem) =>
    (e: Event) {
        item.text = e.target.value;
    }

func memo handleItemDoneChange(item: TodoItem) =>
    (e: Event) {
        item.done = e.target.checked;
    }

func itemValid(item: TodoItem) => item.text.length > 3

store AppStore {
    
    visible items: TodoItem[] = (
        if (logf(LocalStorage.getItem(lsKey)) != nil) {
            parse(LocalStorage.getItem(lsKey))
        } else {
            []
        }
    )

    func allValid() => iter<TodoItem>(this.items)//.every(itemValid)

    public proc addItem() {
        this.items.push({ text: '', done: false });
    }

    public proc clearDone() {
        this.items = iter(this.items).filter(item => item.done == false).array();
    }
}

proc main() {
    observe () => stringify(AppStore.items, 0)
    triggering (json) {
        logp('setting ' + lsKey);
        // LocalStorage.setItem(lsKey, json);
    }
    forever;

    observe () => renderApp()
    triggering (content: Element) {
        render(content);
    }
    forever;
}

// shared namespace (parent object? module?) for all global/system/browser/externalities?
